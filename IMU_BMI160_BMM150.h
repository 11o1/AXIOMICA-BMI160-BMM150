/**
 * @file IMU_BMI160_BMM150.h
 * @brief Заголовочный файл библиотеки для работы с 9-осевой IMU системой (BMI160 + BMM150)
 * 
 * Эта библиотека предоставляет интерфейс для работы с 9-осевой IMU системой,
 * состоящей из:
 * - BMI160 (акселерометр + гироскоп)
 * - BMM150 (магнитометр)
 * 
 * Библиотека поддерживает два режима подключения BMM150:
 * 1. Прямое подключение к шине I2C (PRIMARY)
 * 2. Подключение через вторичный интерфейс BMI160 (SECONDARY)
 * 
 * Основные возможности:
 * - Автоматическое обнаружение и инициализация датчиков
 * - Гибкое управление диапазонами измерений акселерометра и гироскопа
 * - Полное сканирование I2C шины для поиска BMM150
 * - Поддержка работы только с доступными датчиками
 * - Детальная диагностика и отладочный вывод
 * 
 * @author Bosch Sensortec + Custom
 * @date 2025-10-11
 * @version 1.2
 * 
 * @note Эта библиотека совместима с Arduino IDE и другими средами, поддерживающими C++
 * @note Для включения отладочного вывода добавьте #define IMU_BMI160_BMM150_DEBUG
 * 
 * Документация:
 * - BMI160: BMM150 DOC012143196.pdf
 * - BMM150: BMM150 DOC012143196.pdf
 */

#ifndef IMU_BMI160_BMM150_H
#define IMU_BMI160_BMM150_H

#include <Arduino.h>
#include <Wire.h>

// Определение режимов работы магнитометра
enum MagMode { 
    NONE,    // Магнитометр не обнаружен
    PRIMARY, // BMM150 подключен напрямую к шине I2C
    SECONDARY // BMM150 подключен через вторичный интерфейс BMI160
};

// Структура для хранения текущей конфигурации сенсоров
struct SensorConfig {
    uint8_t acc_odr;     // Выходная частота данных акселерометра (Output Data Rate)
    uint8_t acc_range;   // Диапазон измерений акселерометра
    uint8_t gyr_odr;     // Выходная частота данных гироскопа
    uint8_t gyr_range;   // Диапазон измерений гироскопа
};

// Константы преобразования значений сенсоров в физические единицы
extern float ACC_LSB;  // Коэффициент преобразования для акселерометра (LSB/g)
extern float GYR_LSB;  // Коэффициент преобразования для гироскопа (LSB/°/s)
const float MAG_LSB_UT = 0.3f;  // Коэффициент преобразования для магнитометра (LSB/μT)

/**
 * @brief Инициализирует IMU систему (BMI160 + BMM150)
 * 
 * @return true если инициализация прошла успешно, false в случае ошибки
 * 
 * Функция выполняет следующие шаги:
 * 1. Поиск и инициализация BMI160 по адресам 0x68 и 0x69
 * 2. Настройка параметров акселерометра и гироскопа
 * 3. Поиск BMM150:
 *    - Сначала проверяются основные адреса (0x10-0x13)
 *    - Затем проверяется вторичный интерфейс BMI160
 *    - Если BMM150 не найден, выполняется полное сканирование шины I2C (0x00-0x7F)
 * 4. Инициализация магнитометра в зависимости от обнаруженного режима
 * 
 * @note Функция выводит подробный лог инициализации в Serial (если отладка включена)
 */
bool IMU_begin();

/**
 * @brief Считывает данные с акселерометра, гироскопа и магнитометра
 * 
 * @param acc Массив для хранения значений акселерометра (x, y, z)
 * @param gyr Массив для хранения значений гироскопа (x, y, z)
 * @param mag Массив для хранения значений магнитометра (x, y, z)
 * @param rhall Указатель на переменную для хранения значения RHALL (для калибровки)
 * 
 * Функция автоматически определяет режим работы магнитометра и:
 * - Если магнитометр подключен напрямую (PRIMARY), отправляет команду Forced Mode
 * - Если магнитометр подключен через BMI160 (SECONDARY), управляется через BMI160
 * 
 * @note Данные возвращаются в "сыром" формате (сырые значения сенсоров)
 */
void IMU_readData(int16_t *acc, int16_t *gyr, int16_t *mag, int16_t *rhall);

/**
 * @brief Устанавливает диапазон измерений акселерометра
 * 
 * @param range Новое значение диапазона (0x03, 0x05, 0x08, 0x0C)
 * 
 * Значения диапазона:
 * 0x03: ±2g (16384 LSB/g)
 * 0x05: ±4g (8192 LSB/g)
 * 0x08: ±8g (4096 LSB/g)
 * 0x0C: ±16g (2048 LSB/g)
 * 
 * Функция обновляет внутренние коэффициенты преобразования
 */
void IMU_setAccelRange(uint8_t range);

/**
 * @brief Устанавливает диапазон измерений гироскопа
 * 
 * @param range Новое значение диапазона (0x00-0x04)
 * 
 * Значения диапазона:
 * 0x00: ±2000°/s (16.384 LSB/°/s)
 * 0x01: ±1000°/s (32.768 LSB/°/s)
 * 0x02: ±500°/s (65.536 LSB/°/s)
 * 0x03: ±250°/s (131.072 LSB/°/s)
 * 0x04: ±125°/s (262.144 LSB/°/s)
 * 
 * Функция обновляет внутренние коэффициенты преобразования
 */
void IMU_setGyroRange(uint8_t range);

/**
 * @brief Возвращает текущий режим работы магнитометра
 * 
 * @return MagMode текущий режим работы магнитометра
 * 
 * Возможные значения:
 * - PRIMARY: BMM150 подключен напрямую к шине I2C
 * - SECONDARY: BMM150 подключен через BMI160
 * - NONE: магнитометр не обнаружен
 */
MagMode IMU_getMagMode();

/**
 * @brief Проверяет статус инициализации системы
 * 
 * @return true если система успешно инициализирована, false в противном случае
 */
bool IMU_isInitialized();

/**
 * @brief Читает данные сенсоров с заданной частотой, усредняя результаты
 * 
 * @param acc Массив для хранения усредненных значений акселерометра (x, y, z)
 * @param gyr Массив для хранения усредненных значений гироскопа (x, y, z)
 * @param mag Массив для хранения усредненных значений магнитометра (x, y, z)
 * @param rhall Указатель на переменную для хранения усредненного значения RHALL
 * @param frequency Частота опроса (Гц)
 * 
 * Функция:
 * 1. Устанавливает максимальную частоту измерений для всех датчиков
 * 2. Считывает данные с максимально возможной частотой
 * 3. Усредняет данные для достижения заданной частоты
 * 4. Обрабатывает возможные различия в скорости работы датчиков
 * 
 * @note Функция автоматически определяет оптимальный режим работы
 * @note Если заданная частота выше возможной, используется максимальная
 */
void IMU_readDataWithFrequency(int16_t *acc, int16_t *gyr, int16_t *mag, int16_t *rhall, float frequency);

#endif // IMU_BMI160_BMM150_H